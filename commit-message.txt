feat(code-map-generator): implemented memory optimization and module resolution fixes

Implemented comprehensive memory optimization features for the code-map-generator tool to reduce memory usage and improve performance, along with fixing module resolution issues for ESM compatibility.

Key changes:
- Added memory monitoring system with sampling and reporting capabilities
- Implemented language-based batch processing to optimize memory usage
- Added process lifecycle management for better resource cleanup
- Enhanced grammar loading with lazy initialization and memory-aware loading
- Fixed module resolution issues for ESM compatibility
- Improved import resolver with better memory management
- Added metadata-focused caching to reduce memory footprint
- Implemented memory leak detection and prevention mechanisms
- Added comprehensive testing for memory optimization features
- Updated build process to integrate with main project's TypeScript configuration
- Removed stub files and copy-stubs.js script in favor of proper module resolution
- Updated package.json scripts to remove postbuild script

Performance improvements:
- Reduced memory usage by implementing aggressive cleanup between batches
- Optimized grammar loading to reduce initial memory footprint
- Added tiered caching system with LRU eviction for better memory management
- Implemented memory-aware batch processing with adaptive batch sizes
- Added memory usage reporting for better monitoring and debugging

Bug fixes:
- Fixed module resolution errors in ESM environment
- Resolved memory leaks in parser and grammar manager
- Fixed import resolver memory issues with proper cleanup
- Addressed cache invalidation issues in file content manager

Related issues:
- Resolves memory usage spikes during large codebase processing
- Fixes module resolution errors in Claude Desktop environment
